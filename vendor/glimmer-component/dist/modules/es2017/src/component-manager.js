import { CONSTANT_TAG } from '@glimmer/reference';
import { DEBUG } from '@glimmer/env';
import Bounds from './bounds';
import { RootReference, TemplateOnlyComponentDebugReference } from './references';
import { MAGIC_PROP, DESTROYING, DESTROYED } from '../addon/-private/component';
export class ComponentStateBucket {
    constructor(definition, args, owner, env) {
        let { ComponentClass, name } = definition;
        this.args = args;
        if (ComponentClass) {
            if (ComponentClass.class !== undefined) {
                ComponentClass = ComponentClass.class;
            }
            this.component = new ComponentClass(owner, this.namedArgsSnapshot());
            this.component.debugName = name;
        }
    }
    get tag() {
        return this.args.tag;
    }
    namedArgsSnapshot() {
        let snapshot = this.args.named.value();
        if (DEBUG) {
            Object.defineProperty(snapshot, MAGIC_PROP, {
                enumerable: false,
                value: true,
            });
        }
        return Object.freeze(snapshot);
    }
}
const EMPTY_SELF = new RootReference(null);
/**
 * For performance reasons, we want to avoid instantiating component buckets for
 * components that don't have an associated component class that we would need
 * instantiate and invoke lifecycle hooks on.
 *
 * In development mode, however, we need to track some state about the component
 * in order to produce more useful error messages. This
 * TemplateOnlyComponentDebugBucket is only created in development mode to hold
 * that state.
 */
export class TemplateOnlyComponentDebugBucket {
    constructor(definition) {
        this.definition = definition;
    }
}
export default class ComponentManager {
    static create(options) {
        return new ComponentManager(options);
    }
    constructor(options) {
        this.env = options.env;
    }
    prepareArgs(state, args) {
        return null;
    }
    getCapabilities(state) {
        return state.capabilities;
    }
    getJitStaticLayout(state, resolver) {
        let template = resolver.resolve(state.handle);
        let locator = template.meta;
        return resolver.compilable(locator).asLayout();
    }
    getAotStaticLayout({ name, handle, symbolTable }, resolver) {
        if (handle && symbolTable) {
            return {
                handle,
                symbolTable,
            };
        }
        throw new Error('unimplemented getAotStaticLayout');
    }
    create(_env, definition, args, _dynamicScope, _caller, _hasDefaultBlock) {
        // In development mode, if a component is template-only, save off state
        // needed for error messages. This will get stripped in production mode and
        // no bucket will be instantiated.
        if (DEBUG && !definition.ComponentClass) {
            return new TemplateOnlyComponentDebugBucket(definition);
        }
        // Only create a state bucket if the component is actually stateful. We can
        // skip this for template-only components, which are pure functions.
        if (definition.ComponentClass) {
            let owner = this.env.getOwner();
            return new ComponentStateBucket(definition, args.capture(), owner, this.env);
        }
    }
    getSelf(bucket) {
        if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) {
            return new TemplateOnlyComponentDebugReference(bucket.definition.name);
        }
        if (bucket) {
            return new RootReference(bucket.component);
        }
        return EMPTY_SELF;
    }
    didCreateElement(bucket, element) { }
    didRenderLayout(bucket, bounds) {
        if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) {
            return;
        }
        if (!bucket) {
            return;
        }
        bucket.component.bounds = new Bounds(bounds);
    }
    didCreate(bucket) {
        if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) {
            return;
        }
        if (!bucket) {
            return;
        }
        bucket.component.didInsertElement();
    }
    getTag(bucket) {
        if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) {
            return CONSTANT_TAG;
        }
        if (!bucket) {
            return CONSTANT_TAG;
        }
        return bucket.tag;
    }
    update(bucket, scope) {
        if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) {
            return;
        }
        if (!bucket) {
            return;
        }
        bucket.component.args = bucket.namedArgsSnapshot();
    }
    didUpdateLayout() { }
    didUpdate() { }
    getDestructor(bucket) {
        if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) {
            return NOOP_DESTROYABLE;
        }
        if (!bucket) {
            return NOOP_DESTROYABLE;
        }
        return {
            destroy() {
                bucket.component[DESTROYING] = true;
                bucket.component.willDestroy();
                bucket.component[DESTROYED] = true;
            },
        };
    }
}
const NOOP_DESTROYABLE = { destroy() { } };
//# sourceMappingURL=data:application/json;base64,